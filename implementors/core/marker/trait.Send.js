(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Send for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Send for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Send for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Send for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array + Send&gt; Send for Drain&lt;'a, A&gt;","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Send for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for DecoderReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for EncoderWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for EncoderStringWriter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for CharacterSet","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;O, V&gt; Send for BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for BitDomain&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: BitStore + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Mem as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for BitDomainMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: BitStore + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Mem as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Domain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for DomainMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitIdx&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitTail&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitPos&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitSel&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitMask&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Send for Msb0","synthetic":true,"types":[]},{"text":"impl Send for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for Split&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for SplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplit&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for SplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for SplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !Send for BitMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Send for IntoIter&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, I&gt; Send for Splice&lt;'a, O, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Send for Iter&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for IterMut&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Threadsafe: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for Drain&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;'a&gt; Send for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Bytes","synthetic":false,"types":[]},{"text":"impl Send for BytesMut","synthetic":false,"types":[]}];
implementors["canonical_json"] = [{"text":"impl Send for CanonicalJSONError","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for FixedOffset","synthetic":true,"types":[]},{"text":"impl Send for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NaiveDate","synthetic":true,"types":[]},{"text":"impl Send for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Send for IsoWeek","synthetic":true,"types":[]},{"text":"impl Send for NaiveTime","synthetic":true,"types":[]},{"text":"impl Send for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Send for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Pad","synthetic":true,"types":[]},{"text":"impl Send for Numeric","synthetic":true,"types":[]},{"text":"impl Send for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Send for Fixed","synthetic":true,"types":[]},{"text":"impl Send for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RoundingError","synthetic":true,"types":[]},{"text":"impl Send for Weekday","synthetic":true,"types":[]},{"text":"impl Send for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Send for Month","synthetic":true,"types":[]},{"text":"impl Send for ParseMonthError","synthetic":true,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;V, F&gt; Send for Data&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Fields&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;T, L, C&gt; Send for GenericParam&lt;T, L, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, W&gt; Send for Generics&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]},{"text":"impl Send for Purpose","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl !Send for IdentString","synthetic":true,"types":[]},{"text":"impl Send for Ignored","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Override&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for PathList","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; Send for WithOriginal&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for SpannedValue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]}];
implementors["data_encoding"] = [{"text":"impl Send for DecodeKind","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for DecodePartial","synthetic":true,"types":[]},{"text":"impl Send for BitOrder","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for Translate","synthetic":true,"types":[]},{"text":"impl Send for Wrap","synthetic":true,"types":[]},{"text":"impl Send for Specification","synthetic":true,"types":[]},{"text":"impl Send for SpecificationError","synthetic":true,"types":[]}];
implementors["der_parser"] = [{"text":"impl Send for BerClassFromIntError","synthetic":true,"types":[]},{"text":"impl Send for BerSizeError","synthetic":true,"types":[]},{"text":"impl Send for BerClass","synthetic":true,"types":[]},{"text":"impl Send for BerSize","synthetic":true,"types":[]},{"text":"impl Send for BerTag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BerObject&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BerObjectHeader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BerObjectContent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BerObjectIntoIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BerObjectRefIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BitStringObject&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PrettyPrinterFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyBer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BerError","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Oid&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["derive_builder_core"] = [{"text":"impl Send for Bindings","synthetic":true,"types":[]},{"text":"impl !Send for Block","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BuildMethod&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Builder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BuilderField&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DeprecationNotes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Initializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BuilderPattern","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Setter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["error_support"] = [{"text":"impl Send for Backtrace","synthetic":true,"types":[]}];
implementors["ffi_support"] = [{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for FfiStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for HandleMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HandleError","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ConcurrentHandleMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for ByteBuffer","synthetic":true,"types":[]},{"text":"impl Send for ExternError","synthetic":false,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Send for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Send for FromHexError","synthetic":true,"types":[]}];
implementors["ident_case"] = [{"text":"impl Send for RenameRule","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Send for Idna","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Errors","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, Pred&gt; Send for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Send for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; Send for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Send for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Send for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl Send for flock64","synthetic":true,"types":[]},{"text":"impl Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for stat64","synthetic":true,"types":[]},{"text":"impl Send for statfs64","synthetic":true,"types":[]},{"text":"impl Send for statvfs64","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Send for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Send for user","synthetic":true,"types":[]},{"text":"impl !Send for mcontext_t","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for termios2","synthetic":true,"types":[]},{"text":"impl Send for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Send for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for sigset_t","synthetic":true,"types":[]},{"text":"impl Send for sysinfo","synthetic":true,"types":[]},{"text":"impl Send for msqid_ds","synthetic":true,"types":[]},{"text":"impl Send for sem_t","synthetic":true,"types":[]},{"text":"impl Send for statx","synthetic":true,"types":[]},{"text":"impl Send for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl Send for __exit_status","synthetic":true,"types":[]},{"text":"impl Send for __timeval","synthetic":true,"types":[]},{"text":"impl !Send for glob64_t","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for mallinfo","synthetic":true,"types":[]},{"text":"impl Send for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Send for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Send for nlattr","synthetic":true,"types":[]},{"text":"impl !Send for rtentry","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl Send for fpos64_t","synthetic":true,"types":[]},{"text":"impl Send for rlimit64","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for spwd","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Send for itimerspec","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl Send for packet_mreq","synthetic":true,"types":[]},{"text":"impl Send for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl Send for msginfo","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for input_event","synthetic":true,"types":[]},{"text":"impl Send for input_id","synthetic":true,"types":[]},{"text":"impl Send for input_absinfo","synthetic":true,"types":[]},{"text":"impl Send for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Send for input_mask","synthetic":true,"types":[]},{"text":"impl Send for ff_replay","synthetic":true,"types":[]},{"text":"impl Send for ff_trigger","synthetic":true,"types":[]},{"text":"impl Send for ff_envelope","synthetic":true,"types":[]},{"text":"impl Send for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Send for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_effect","synthetic":true,"types":[]},{"text":"impl Send for uinput_ff_upload","synthetic":true,"types":[]},{"text":"impl Send for uinput_ff_erase","synthetic":true,"types":[]},{"text":"impl Send for uinput_abs_setup","synthetic":true,"types":[]},{"text":"impl !Send for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Send for ucred","synthetic":true,"types":[]},{"text":"impl !Send for mntent","synthetic":true,"types":[]},{"text":"impl !Send for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Send for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Send for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for arpd_request","synthetic":true,"types":[]},{"text":"impl Send for inotify_event","synthetic":true,"types":[]},{"text":"impl Send for fanotify_response","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Send for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Send for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Send for can_filter","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for dirent64","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Send for uinput_setup","synthetic":true,"types":[]},{"text":"impl Send for uinput_user_dev","synthetic":true,"types":[]},{"text":"impl Send for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Send for mq_attr","synthetic":true,"types":[]},{"text":"impl Send for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for can_frame","synthetic":true,"types":[]},{"text":"impl Send for canfd_frame","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl Send for sched_param","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Send for arpreq","synthetic":true,"types":[]},{"text":"impl Send for arpreq_old","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl !Send for mmsghdr","synthetic":true,"types":[]},{"text":"impl Send for epoll_event","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]}];
implementors["libsqlite3_sys"] = [{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for sqlite3","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_file","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_io_methods","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_mutex","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_api_routines","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_vfs","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_mem_methods","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_stmt","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_value","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_context","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_module","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_index_info","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_index_info_sqlite3_index_constraint","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_index_info_sqlite3_index_orderby","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_index_info_sqlite3_index_constraint_usage","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_vtab","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_vtab_cursor","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_blob","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_mutex_methods","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_str","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_pcache","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_pcache_page","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_pcache_methods2","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_pcache_methods","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_backup","synthetic":true,"types":[]},{"text":"impl Send for sqlite3_snapshot","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_rtree_geometry","synthetic":true,"types":[]},{"text":"impl !Send for sqlite3_rtree_query_info","synthetic":true,"types":[]},{"text":"impl Send for Fts5Context","synthetic":true,"types":[]},{"text":"impl !Send for Fts5PhraseIter","synthetic":true,"types":[]},{"text":"impl Send for Fts5ExtensionApi","synthetic":true,"types":[]},{"text":"impl Send for Fts5Tokenizer","synthetic":true,"types":[]},{"text":"impl Send for fts5_tokenizer","synthetic":true,"types":[]},{"text":"impl Send for fts5_api","synthetic":true,"types":[]},{"text":"impl Send for Limit","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Send for Key&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for AsMap&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for AsList&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'v&gt; !Send for Value&lt;'v&gt;","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Send for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["nss"] = [{"text":"impl Send for Operation","synthetic":true,"types":[]},{"text":"impl Send for Curve","synthetic":true,"types":[]},{"text":"impl Send for EcKey","synthetic":true,"types":[]},{"text":"impl Send for PrivateKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl !Send for SymKey","synthetic":true,"types":[]},{"text":"impl !Send for GenericObject","synthetic":true,"types":[]},{"text":"impl !Send for Context","synthetic":true,"types":[]},{"text":"impl !Send for Slot","synthetic":true,"types":[]},{"text":"impl !Send for AlgorithmID","synthetic":true,"types":[]},{"text":"impl Send for PrivateKey","synthetic":false,"types":[]},{"text":"impl Send for PublicKey","synthetic":false,"types":[]}];
implementors["nss_sys"] = [{"text":"impl !Send for SECKEYPublicKeyStr","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYPublicKeyStr_u","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYPrivateKeyStr","synthetic":true,"types":[]},{"text":"impl Send for KeyType","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYRSAPublicKeyStr","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYDSAPublicKeyStr","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYPQGParamsStr","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYDHPublicKeyStr","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYKEAPublicKeyStr","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYKEAParamsStr","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYFortezzaPublicKeyStr","synthetic":true,"types":[]},{"text":"impl !Send for SECKEYECPublicKeyStr","synthetic":true,"types":[]},{"text":"impl Send for ECPointEncoding","synthetic":true,"types":[]},{"text":"impl !Send for CK_GCM_PARAMS_V3","synthetic":true,"types":[]},{"text":"impl !Send for CK_NSS_HKDFParams","synthetic":true,"types":[]},{"text":"impl !Send for CK_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl !Send for PLArena","synthetic":true,"types":[]},{"text":"impl !Send for PLArenaPool","synthetic":true,"types":[]},{"text":"impl Send for SECItemType","synthetic":true,"types":[]},{"text":"impl !Send for SECItemStr","synthetic":true,"types":[]},{"text":"impl Send for _SECStatus","synthetic":true,"types":[]},{"text":"impl Send for PK11Origin","synthetic":true,"types":[]},{"text":"impl Send for PK11ObjectType","synthetic":true,"types":[]},{"text":"impl !Send for SECAlgorithmIDStr","synthetic":true,"types":[]},{"text":"impl !Send for SECOidDataStr","synthetic":true,"types":[]},{"text":"impl Send for SECSupportExtenTag","synthetic":true,"types":[]},{"text":"impl Send for SECOidTag","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Send for Sign","synthetic":true,"types":[]},{"text":"impl Send for BigInt","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for U32Digits&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for U64Digits&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BigUint","synthetic":true,"types":[]},{"text":"impl Send for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]}];
implementors["oid_registry"] = [{"text":"impl Send for LoadedEntry","synthetic":true,"types":[]},{"text":"impl Send for OidEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OidRegistry&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OnceBox&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OnceNonZeroUsize","synthetic":true,"types":[]},{"text":"impl Send for OnceBool","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for IntoIter","synthetic":true,"types":[]},{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]}];
implementors["prost"] = [{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for EncodeError","synthetic":true,"types":[]}];
implementors["rc_crypto"] = [{"text":"impl&lt;'a&gt; Send for Aad&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nonce","synthetic":true,"types":[]},{"text":"impl Send for OpeningKey","synthetic":true,"types":[]},{"text":"impl Send for SealingKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Ephemeral","synthetic":true,"types":[]},{"text":"impl Send for Static","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for KeyPair&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnparsedPublicKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for PrivateKey&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InputKeyMaterial","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for SigningKey","synthetic":true,"types":[]},{"text":"impl Send for VerificationKey","synthetic":true,"types":[]},{"text":"impl Send for VerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnparsedPublicKey&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WithComments","synthetic":true,"types":[]},{"text":"impl Send for Comment","synthetic":true,"types":[]},{"text":"impl Send for Ast","synthetic":true,"types":[]},{"text":"impl Send for Alternation","synthetic":true,"types":[]},{"text":"impl Send for Concat","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for LiteralKind","synthetic":true,"types":[]},{"text":"impl Send for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassPerl","synthetic":true,"types":[]},{"text":"impl Send for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Send for ClassAscii","synthetic":true,"types":[]},{"text":"impl Send for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Send for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Send for ClassSet","synthetic":true,"types":[]},{"text":"impl Send for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Send for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Send for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for AssertionKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for CaptureName","synthetic":true,"types":[]},{"text":"impl Send for SetFlags","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for FlagsItem","synthetic":true,"types":[]},{"text":"impl Send for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Literals","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Translator","synthetic":true,"types":[]},{"text":"impl Send for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Hir","synthetic":true,"types":[]},{"text":"impl Send for HirKind","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Send for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for WordBoundary","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl Send for Utf8Range","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequences","synthetic":true,"types":[]}];
implementors["remote_settings_client"] = [{"text":"impl Send for RingVerifier","synthetic":true,"types":[]},{"text":"impl Send for RcCryptoVerifier","synthetic":true,"types":[]},{"text":"impl Send for SignatureError","synthetic":true,"types":[]},{"text":"impl Send for DummyStorage","synthetic":true,"types":[]},{"text":"impl Send for FileStorage","synthetic":true,"types":[]},{"text":"impl Send for MemoryStorage","synthetic":true,"types":[]},{"text":"impl Send for StorageError","synthetic":true,"types":[]},{"text":"impl Send for ClientError","synthetic":true,"types":[]},{"text":"impl Send for Record","synthetic":true,"types":[]},{"text":"impl Send for Collection","synthetic":true,"types":[]},{"text":"impl !Send for Client","synthetic":true,"types":[]},{"text":"impl !Send for ClientBuilder","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Send for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SealingKey","synthetic":true,"types":[]},{"text":"impl Send for OpeningKey","synthetic":true,"types":[]},{"text":"impl Send for Nonce","synthetic":true,"types":[]},{"text":"impl Send for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnboundKey","synthetic":true,"types":[]},{"text":"impl Send for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Send for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Send for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for Unspecified","synthetic":true,"types":[]},{"text":"impl Send for KeyRejected","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Salt","synthetic":true,"types":[]},{"text":"impl Send for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SystemRandom","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Send for RsaParameters","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rusticata_macros"] = [{"text":"impl Send for HexU8","synthetic":true,"types":[]},{"text":"impl Send for HexU16","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HexSlice&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for BytesDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Send for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Send for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Send for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CharEscape","synthetic":true,"types":[]},{"text":"impl Send for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Serializer","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Once&lt;T&gt;","synthetic":false,"types":[]}];
implementors["strsim"] = [{"text":"impl Send for StrSimError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Abstract","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Await","synthetic":true,"types":[]},{"text":"impl !Send for Become","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Final","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Override","synthetic":true,"types":[]},{"text":"impl !Send for Priv","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for SelfType","synthetic":true,"types":[]},{"text":"impl !Send for SelfValue","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Try","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Typeof","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Unsized","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Virtual","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Tilde","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Send for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprBox","synthetic":true,"types":[]},{"text":"impl !Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl !Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Send for ExprIf","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Send for ExprLet","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl !Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprReference","synthetic":true,"types":[]},{"text":"impl !Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Send for ExprTry","synthetic":true,"types":[]},{"text":"impl !Send for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprType","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Send for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Send for FieldValue","synthetic":true,"types":[]},{"text":"impl !Send for Label","synthetic":true,"types":[]},{"text":"impl !Send for Arm","synthetic":true,"types":[]},{"text":"impl !Send for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for Item","synthetic":true,"types":[]},{"text":"impl !Send for ItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Send for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Send for ItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Send for ItemMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Send for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Send for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Send for ItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Send for ItemUse","synthetic":true,"types":[]},{"text":"impl !Send for UseTree","synthetic":true,"types":[]},{"text":"impl !Send for UsePath","synthetic":true,"types":[]},{"text":"impl !Send for UseName","synthetic":true,"types":[]},{"text":"impl !Send for UseRename","synthetic":true,"types":[]},{"text":"impl !Send for UseGlob","synthetic":true,"types":[]},{"text":"impl !Send for UseGroup","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for TraitItem","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ImplItem","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for Signature","synthetic":true,"types":[]},{"text":"impl !Send for FnArg","synthetic":true,"types":[]},{"text":"impl !Send for Receiver","synthetic":true,"types":[]},{"text":"impl !Send for File","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for Block","synthetic":true,"types":[]},{"text":"impl !Send for Stmt","synthetic":true,"types":[]},{"text":"impl !Send for Local","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for Variadic","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Pat","synthetic":true,"types":[]},{"text":"impl !Send for PatBox","synthetic":true,"types":[]},{"text":"impl !Send for PatIdent","synthetic":true,"types":[]},{"text":"impl !Send for PatLit","synthetic":true,"types":[]},{"text":"impl !Send for PatMacro","synthetic":true,"types":[]},{"text":"impl !Send for PatOr","synthetic":true,"types":[]},{"text":"impl !Send for PatPath","synthetic":true,"types":[]},{"text":"impl !Send for PatRange","synthetic":true,"types":[]},{"text":"impl !Send for PatReference","synthetic":true,"types":[]},{"text":"impl !Send for PatRest","synthetic":true,"types":[]},{"text":"impl !Send for PatSlice","synthetic":true,"types":[]},{"text":"impl !Send for PatStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatTuple","synthetic":true,"types":[]},{"text":"impl !Send for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatType","synthetic":true,"types":[]},{"text":"impl !Send for PatWild","synthetic":true,"types":[]},{"text":"impl !Send for FieldPat","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Send for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nothing","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Send for ArrayVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ArrayVecDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; Send for SliceVec&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, 's, T&gt; Send for SliceVecDrain&lt;'p, 's, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for TinyVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Send for TinyVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for BidiClass","synthetic":true,"types":[]},{"text":"impl Send for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Send for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Replacements&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Send for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Mark","synthetic":true,"types":[]},{"text":"impl Send for EndOfInput","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; Send for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Origin","synthetic":true,"types":[]},{"text":"impl Send for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["value_bag"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'f&gt; !Send for Slot&lt;'s, 'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'v&gt; !Send for ValueBag&lt;'v&gt;","synthetic":true,"types":[]}];
implementors["viaduct"] = [{"text":"impl Send for HeaderName","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for Headers","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for UnexpectedStatus","synthetic":true,"types":[]},{"text":"impl Send for Settings","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]}];
implementors["wyz"] = [{"text":"impl&lt;T&gt; Send for FmtBinary&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtDisplay&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtLowerExp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtLowerHex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtOctal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtPointer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtUpperExp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtUpperHex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["x509_parser"] = [{"text":"impl&lt;'a&gt; Send for X509Certificate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TbsCertificate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Validity","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UniqueIdentifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for X509CertificationRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for X509CertificationRequestInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for X509CriAttribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ExtensionRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParsedCriAttribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NidError","synthetic":true,"types":[]},{"text":"impl Send for X509Error","synthetic":true,"types":[]},{"text":"impl Send for PEMError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for X509Extension&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParsedExtension&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AuthorityKeyIdentifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CertificatePolicies&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BasicConstraints","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for KeyIdentifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for KeyUsage","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ExtendedKeyUsage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NSCertType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AuthorityInfoAccess&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InhibitAnyPolicy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PolicyMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PolicyConstraints","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SubjectAlternativeName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GeneralName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NameConstraints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GeneralSubtree&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Pem","synthetic":true,"types":[]},{"text":"impl&lt;Reader&gt; Send for PemIterator&lt;Reader&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Reader: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CertificateRevocationList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TbsCertList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RevokedCertificate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ASN1Time","synthetic":true,"types":[]},{"text":"impl Send for X509Version","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AttributeTypeAndValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RelativeDistinguishedName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SubjectPublicKeyInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AlgorithmIdentifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for X509Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReasonCode","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()